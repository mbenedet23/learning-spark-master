#
# Copyright (c) 2017 Cloudera, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Sample Cloudera Altus Director configuration file based on the Cloudera Azure reference architecture:
# http://www.cloudera.com/documentation/other/reference-architecture/PDF/cloudera_ref_arch_azure.pdf
#
# Simple non-HA cluster with a single master node, 3 worker nodes
#


#
# Cluster name
# If environmentName and deploymentName are not defined they will get the value of 'name'.
# Must be unique.
#

name: C6-Simple-Azure

#
# Environment name
#

environmentName: Azure-nonHA

#
# Deployment name
# Used to name the Cloudera Manager instance in Cloudera Altus Director.
# Must be unique.
#

deploymentName: Cloudera-Manager-on-Azure


#
# Cloud provider configuration (credentials, region, and management/authentication endpoints)
#

provider {
    type: azure

    #
    # ID of Azure region to use. NOTE: region must support Premium Storage
    # See: https://azure.microsoft.com/en-us/regions/#services
    #

    region: "region_REPLACE_ME"

    #
    # Azure Cloud Environment to use. Valid values are:
    #   - azure
    #   - azure-us-government
    #   - azure-germany
    #
    azureCloudEnvironment: "azureCloudEnvironment_REPLACE_ME"

    #
    # Azure Management URL. (Now deprecated, use azureCloudEnvironment instead.
    #
    # mgmtUrl: "https://management.core.windows.net/"
    #

    #
    # Azure Active Directory Subscription ID.
    #

    subscriptionId: "subscriptionId_REPLACE_ME"

    #
    # Tenant ID (from AAD)
    #

    tenantId: "tenantId_REPLACE_ME"

    #
    # Azure Active Directory Application Client ID.
    #

    clientId: "clientId_REPLACE_ME"

    #
    # Client Secret
    #

    clientSecret: "clientSecret_REPLACE_ME"
}


#
# SSH credentials to use to connect to the machines
#

ssh {
    username: "username_REPLACE_ME"
    privateKey: """-----BEGIN RSA PRIVATE KEY-----
privateKey_REPLACE_ME
-----END RSA PRIVATE KEY-----"""
}


#
# Common variable definitions
#
# These are the key / value pairs used to define instance templates. They are defined here and
# referenced throughout this config file.
# More about HOCON substitution: https://github.com/typesafehub/config/blob/master/HOCON.md#substitutions
#
# The format of this section:
#   - base: represents the core config fields that are common to all nodes
#   - master: represents the core config fields that are common to master nodes
#   - worker: represents the core config fields that are common to worker nodes
#   - edge: represents the core config fields that are common to edge nodes
#
#
# Instance Template Breakdown
# An instance template configuration consists of the following fields. Unless otherwise specified,
# all fields are required.
#
# - image: The image ID used for instances is an alias defined in the plugin configuration file.
#
# - type: The VM type. See the Azure RA for more detail.
#
# - computeResourceGroup: Resource Group for the deployment.  The Resource Group you specify must
#   exist within the region you selected.
#   See: https://azure.microsoft.com/en-us/documentation/articles/resource-group-overview/
#
# - networkSecurityGroupResourceGroup: The Resource Group for the Network Security Group. The
#   Resource Group you specify must exist within the region you selected.
#   See: https://azure.microsoft.com/en-us/documentation/articles/resource-group-overview/
#
# - networkSecurityGroup: The Network Security Group for this instance type, this has to be
#   within the networkSecurityGroupResourceGroup. NSG configuration allows you to limit access to
#   the VM with firewall-like rules.
#   See: https://azure.microsoft.com/en-us/documentation/articles/virtual-networks-nsg/
#
# - virtualNetworkResourceGroup: The Resource Group for the Virtual Network. The Resource Group you
#   specify must exist within the region you selected and should be the same for all instances that
#   will be used in the same cluster.
#   See: https://azure.microsoft.com/en-us/documentation/articles/resource-group-overview/
#
# - virtualNetwork: The Azure Virtual Network that will be used, this has to be within the
#   virtualNetworkResourceGroup and should be the same for all instances that will be used in the
#   same cluster.
#   See: https://azure.microsoft.com/en-us/documentation/services/virtual-network/
#
# - subnetName: The name of the Subnet that will be used, this has to be within the virtualNetwork.
#
# - instanceNamePrefix: Prefix for VM name and hostname of the VM. The VM name will have the
#   folloing format:
#       instanceNamePrefix-{UUID}
#   where {UUID} is generated by the Cloudera Altus Director server.
#
# - hostFqdnSuffix: Hostname FQDN Suffix. This is the DNS domain you configured in your custom DNS
#   server. Example values are: cdh-cluster.internal, cluster.your-company-name.com. The host FQDN
#   is configured on the VMs with the following format:
#       {instanceNamePrefix}-{truncated-UUID}.hostFqdnSuffix
#
# - availabilitySet: Availability Set for this instance type.  Machines within the same availability
#   set will have staggared maintanance times. With a default availability set configuration no more
#   than 1/5 machines will be offline at a time (rounded up).
#   See: https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-linux-manage-availability/
#   Sharing Availability Set between master and worker nodes is strongly not recommended.
#
# - publicIP: Should this instance type have Azure Public IP Address and DNS Label?  If Yes, the
#   machine will have a publically resolvable hostname with the folling format:
#       {instanceNamePrefix}-{UUID}.{region}.coudapp.azure.com
#   Allowed values: Yes, No
#
# - storageAccountType: The storage account type to use. The dataDiskSize parameter should be
#   updated based on the storage account type used.
#   The current allowed values are:
#       - Premium_LRS
#       - Standard_LRS
#   See the RA for the supported ways to use standard storage:
#   http://www.cloudera.com/documentation/other/reference-architecture/PDF/cloudera_ref_arch_azure.pdf
#
# - dataDiskCount: The number of data drives. The size can be specified with `dataDiskSize`
#   Data drives are mounted on /data0 .. /data[n]
#       /data0 - Dedicated Log Device
#   For Masters:
#       /data1 - NameNode Data
#       /data2 - Zookeeper Data / DataLog
#       /data3 - HDFS Secondary NameNode Data
#   For Workers:
#       /data1 .. /data[n] will be used for HDFS data
#
# - dataDiskSize: The size of each data drive.
#   For disks allocated in a premium storage account, only the following GB values are allowed:
#       512 (P20 disk)
#       1023 (P30 disk) - for backwards compatibility
#       1024 (P30 disk)
#       2048 (P40 disk)
#       4095 (P50 disk)
#   For disks allocated in a standard storage account, any size between 1 and 4095 inclusive can
#   be used.
#   See https://azure.microsoft.com/en-us/documentation/articles/storage-introduction/ and
#   https://azure.microsoft.com/en-us/documentation/articles/storage-premium-storage/
#
# - managedDisks: Whether or not to use managed disks.
#   Managed Disks are enabled by default. To use Storage Accounts set this field to "No".
#   In order for managed disks to be used, the availability set must be aligned to use
#   managed disks. For additional details about managed disks see:
#   https://docs.microsoft.com/en-us/azure/virtual-machines/windows/managed-disks-overview
#
# - useCustomManagedImage: Whether or not to use a custom (managed) image.
#   Custom images are only supported when using Managed Disks (`managedDisks` must be `Yes`).
#
# - customImagePlan: The custom VM image purchase plan.
#   The purchase plan for the original VM image used to create the custom image. This can be:
#       - an empty string ("")
#       - a string with the format /publisher/<publisher>/product/<product>/name/<name>
#
# - tags (optional): Additional tags to help label resources within Azure
#
# - bootstrapScripts: The bootstrap scripts (see the bootstrap-script section)
#

common-instanceTemplate {

    # Core config fields that are common to all node types
    base {
        type: STANDARD_DS14
        image: cloudera-centos-67-latest
        networkSecurityGroupResourceGroup: "networkSecurityGroupResourceGroup_REPLACE_ME"
        networkSecurityGroup: "networkSecurityGroup_REPLACE_ME"
        virtualNetworkResourceGroup: "VPCxAzureConsumerNA"
        virtualNetwork: "VPCxAzureConsumerNA-eastus"
        subnetName: "AZR-ADB-Hybrid-1"
        hostFqdnSuffix: "hostFqdnSuffix_REPLACE_ME"
        tags {
            owner: ${?USER}
        }
    }

    # Core config fields that are common to all master nodes
    master {
        computeResourceGroup: "masterBase_computeResourceGroup_REPLACE_ME"
        availabilitySet: "master_availabilitySet_REPLACE_ME"
        instanceNamePrefix: "masterBase_instanceNamePrefix_REPLACE_ME"
        storageAccountType: "Premium_LRS"
        dataDiskCount: 4
        dataDiskSize: 512
        managedDisks: Yes
        publicIP: No
    }

    # Config fields for worker nodes
    worker {
        computeResourceGroup: "worker_computeResourceGroup_REPLACE_ME"
        availabilitySet: "worker_availabilitySet_REPLACE_ME"
        instanceNamePrefix: "worker_instanceNamePrefix_REPLACE_ME"
        storageAccountType: "Standard_LRS"
        dataDiskCount: 11
        dataDiskSize: 1024
        managedDisks: Yes
        publicIP: No
    }

    # Config fields for edge nodes
    edge {
        computeResourceGroup: "edge_computeResourceGroup_REPLACE_ME"
        availabilitySet: "edge_availabilitySet_REPLACE_ME"
        instanceNamePrefix: "edge_instanceNamePrefix_REPLACE_ME"
        storageAccountType: "Premium_LRS"
        dataDiskCount: 1
        dataDiskSize: 512
        managedDisks: Yes
        # Change this to Yes to allow accessing edge/CM nodes via public IP
        publicIP: No
    }
}


#
# Required external database server configuration.
#
# Cloudera Altus Director can create databases on existing database servers.
# NOTE: Cloudera does not support Azure SQL DB service.
#
#
# Database Servers Breakdown
# A database server configuration consists of the following fields. All fields are required.
# To properly setup a database see http://www.cloudera.com/documentation/director/latest/topics/director_get_started_azure_set_up_msql_postgres.html
#
# - type: The type of database to use. Allowed values are:
#     - mysql
#     - postgresql
#
# - host: The static internal IP (recommended) or internal FQDN of the database server.
#
# - port: The database server's port. The default ports are:
#     - mysql: 3306
#     - postgresql: 5432
#
# - user: The user Cloudera Altus Director will use. The user must have privileges to create databases,
#   create users, and grant the users access to those databases.
#
# - password: The password for the database user.
#

databaseServers {

    productionDB {
        type: "type_databaseServers_REPLACE_ME"
        host: "host_databaseServers_REPLACE_ME"
        port: "port_databaseServers_REPLACE_ME"
        user: "user_databaseServers_REPLACE_ME"
        password: "password_databaseServers_REPLACE_ME"
    }

    # Additional database servers can be added by following the same format.

} # End external database configs


#
# Bootstrap script
#
# See azure.reference.conf for general information about bootstrap scripts and
# pre-terminate scripts.
#
# The os-generic bootstrap script will be run after the VM boots up for the first time. This must
# be used to set up preconditions for successful cluster deployment. Director will restart the
# host after the bootstrap script has run.
#
# The example below is an os-generic script that supports these OSes:
#   - CentOS 6
#   - CentOS 7
#   - RHEL 6
#   - RHEL 7
#
# The script prepares the OS for cluster installation. It also configures a dhclient or
# NetworkManager hook (depending on OS) to register the A record and PTR record with the DNS server
# configured for the VNET to satisfy proper forward and reverse DNS resolution. Azure's default DNS
# currently does not support Reverse Lookup on private IP Addresses, which is a requirement for
# CDH. See the following link for an example BIND setup to satisfy this requirement:
# http://www.cloudera.com/documentation/director/latest/topics/director_get_started_azure_ddns.html
#
# The scrip also sets required settings for RHEL.
#

bootstrap-script {
    os-generic : """#!/bin/sh

#
# Copyright (c) 2017 Cloudera, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# This script will bootstrap these OSes:
#   - CentOS 6
#   - CentOS 7
#   - RHEL 6
#   - RHEL 7
#
# Notes and notable differences between OSes:
#   - CentOS and RHEL 6 use dhclient
#   - CentOS and RHEL 7 use NetworkManager
#


#
# Functions
#

#
# CentOS and RHEL 6 use dhclient. Add a script to be automatically invoked when interface comes up.
# Function not indented so EOF works.
#
dhclient_6()
{
# dhclient-exit-hooks explained in dhclient-script man page: http://linux.die.net/man/8/dhclient-script
# cat a here-doc representation of the hooks to the appropriate file
cat > /etc/dhcp/dhclient-exit-hooks <<"EOF"
#!/bin/bash
printf "\ndhclient-exit-hooks running...\n\treason:%s\n\tinterface:%s\n" "${reason:?}" "${interface:?}"
# only execute on the primary nic
if [ "$interface" != "eth0" ]
then
    exit 0;
fi
# when we have a new IP, perform nsupdate
if [ "$reason" = BOUND ] || [ "$reason" = RENEW ] || [ "$reason" = REBIND ] || [ "$reason" = REBOOT ]
then
    printf "\tnew_ip_address:%s\n" "${new_ip_address:?}"
    host=$(hostname -s)
    domain=$(nslookup $(grep -i nameserver /etc/resolv.conf | cut -d ' ' -f 2) | grep -i name | cut -d ' ' -f 3 | cut -d '.' -f 2- | rev | cut -c 2- | rev)
    IFS='.' read -ra ipparts <<< "$new_ip_address"
    ptrrec="$(printf %s "$new_ip_address." | tac -s.)in-addr.arpa"
    nsupdatecmds=$(mktemp -t nsupdate.XXXXXXXXXX)
    resolvconfupdate=$(mktemp -t resolvconfupdate.XXXXXXXXXX)
    echo updating resolv.conf
    grep -iv "search" /etc/resolv.conf > "$resolvconfupdate"
    echo "search $domain" >> "$resolvconfupdate"
    cat "$resolvconfupdate" > /etc/resolv.conf
    echo "Attempting to register $host.$domain and $ptrrec"
    {
        echo "update delete $host.$domain a"
        echo "update add $host.$domain 600 a $new_ip_address"
        echo "send"
        echo "update delete $ptrrec ptr"
        echo "update add $ptrrec 600 ptr $host.$domain"
        echo "send"
    } > "$nsupdatecmds"
    nsupdate "$nsupdatecmds"
fi
#done
exit 0;
EOF
chmod 755 /etc/dhcp/dhclient-exit-hooks
service network restart

# Confirm DNS record has been updated, retry if update did not work
i=0
until [ $i -ge 5 ]
do
    sleep 5
    i=$((i+1))
    hostname | nslookup && break
    service network restart
done

if [ $i -ge 5 ]; then
    echo "DNS update failed"
    exit 1
fi
}


centos_6()
{
    echo "CentOS 6"

    # execute the CentOS / RHEL 6 dhclient-exit-hooks setup
    dhclient_6
}


rhel_6()
{
    echo "RHEL 6"

    # rewrite SELINUX config to disabled and turn off enforcement
    sed -i.bak "s/^SELINUX=.*$/SELINUX=disabled/" /etc/selinux/config
    setenforce 0
    # stop firewall and disable
    service iptables stop
    chkconfig iptables off
    # update config to disable IPv6 and disable
    echo "# Disable IPv6" >> /etc/sysctl.conf
    echo "net.ipv6.conf.all.disable_ipv6 = 1" >> /etc/sysctl.conf
    echo "net.ipv6.conf.default.disable_ipv6 = 1" >> /etc/sysctl.conf
    sysctl -w net.ipv6.conf.all.disable_ipv6=1
    sysctl -w net.ipv6.conf.default.disable_ipv6=1

    # execute the CentOS / RHEL 6 dhclient-exit-hooks setup
    dhclient_6
}


#
# CentOS and RHEL 7 use NetworkManager. Add a script to be automatically invoked when interface comes up.
# Function not indented so EOF works.
#
networkmanager_7()
{
cat > /etc/NetworkManager/dispatcher.d/12-register-dns <<"EOF"
#!/bin/bash
# NetworkManager Dispatch script
# Deployed by Cloudera Altus Director Bootstrap
#
# Expected arguments:
#    $1 - interface
#    $2 - action
#
# See for info: http://linux.die.net/man/8/networkmanager

# Register A and PTR records when interface comes up
# only execute on the primary nic
if [ "$1" != "eth0" ] || [ "$2" != "up" ]
then
    exit 0;
fi

# when we have a new IP, perform nsupdate
new_ip_address="$DHCP4_IP_ADDRESS"

host=$(hostname -s)
domain=$(nslookup $(grep -i nameserver /etc/resolv.conf | cut -d ' ' -f 2) | grep -i name | cut -d ' ' -f 3 | cut -d '.' -f 2- | rev | cut -c 2- | rev)
IFS='.' read -ra ipparts <<< "$new_ip_address"
ptrrec="$(printf %s "$new_ip_address." | tac -s.)in-addr.arpa"
nsupdatecmds=$(mktemp -t nsupdate.XXXXXXXXXX)
resolvconfupdate=$(mktemp -t resolvconfupdate.XXXXXXXXXX)
echo updating resolv.conf
grep -iv "search" /etc/resolv.conf > "$resolvconfupdate"
echo "search $domain" >> "$resolvconfupdate"
cat "$resolvconfupdate" > /etc/resolv.conf
echo "Attempting to register $host.$domain and $ptrrec"
{
    echo "update delete $host.$domain a"
    echo "update add $host.$domain 600 a $new_ip_address"
    echo "send"
    echo "update delete $ptrrec ptr"
    echo "update add $ptrrec 600 ptr $host.$domain"
    echo "send"
} > "$nsupdatecmds"
nsupdate "$nsupdatecmds"
exit 0;
EOF
chmod 755 /etc/NetworkManager/dispatcher.d/12-register-dns
service network restart

# Confirm DNS record has been updated, retry if update did not work
i=0
until [ $i -ge 5 ]
do
    sleep 5
    i=$((i+1))
    hostname | nslookup && break
    service network restart
done

if [ $i -ge 5 ]; then
    echo "DNS update failed"
    exit 1
fi
}


centos_7()
{
    echo "CentOS 7"

    # execute the CentOS / RHEL 7 network manager setup
    networkmanager_7
}


rhel_7()
{
    echo "RHEL 7"

    # rewrite SELINUX config to disable and turn off enforcement
    sed -i.bak "s/^SELINUX=.*$/SELINUX=disabled/" /etc/selinux/config
    setenforce 0
    # stop firewall and disable
    systemctl stop iptables
    systemctl iptables off
    # RHEL 7 uses firewalld
    systemctl stop firewalld
    systemctl disable firewalld
    # Disable tuned so it does not overwrite sysctl.conf
    service tuned stop
    systemctl disable tuned
    # Disable chrony so it does not conflict with ntpd installed by Director
    systemctl stop chronyd
    systemctl disable chronyd
    # update config to disable IPv6 and disable
    echo "# Disable IPv6" >> /etc/sysctl.conf
    echo "net.ipv6.conf.all.disable_ipv6 = 1" >> /etc/sysctl.conf
    echo "net.ipv6.conf.default.disable_ipv6 = 1" >> /etc/sysctl.conf
    # swappiness is set by Director in /etc/sysctl.conf
    # Poke sysctl to have it pickup the config change.
    sysctl -p

    # execute the CentOS / RHEL 7 network manager setup
    networkmanager_7
}


#
# Main workflow
#

# ensure user is root
if [ "$(id -u)" -ne 0 ]
then
    echo "Please run as root."
    exit 1
fi

# find the OS and release
os=""
major_release=""

# if it's there, use lsb_release
if rpm -q redhat-lsb
then
    os=$(lsb_release -si)
    major_release=$(lsb_release -sr | cut -d '.' -f 1)

# if lsb_release isn't installed, use /etc/redhat-release
else
    if grep "CentOS.* 6\\." /etc/redhat-release
    then
        os="CentOS"
        major_release="6"
    fi

    if grep "CentOS.* 7\\." /etc/redhat-release
    then
        os="CentOS"
        major_release="7"
    fi

    if grep "Red Hat Enterprise Linux Server release 6\\." /etc/redhat-release
    then
        os="RedHatEnterpriseServer"
        major_release="6"
    fi

    if grep "Red Hat Enterprise Linux Server release 7\\." /etc/redhat-release
    then
        os="RedHatEnterpriseServer"
        major_release="7"
    fi
fi

echo "OS: $os $major_release"

# select the OS and run the appropriate setup script
not_supported_msg="OS $os $major_release is not supported."
if [ "$os" = "CentOS" ]; then
    if [ "$major_release" = "6" ]; then
        centos_6
    elif [ "$major_release" = "7" ]; then
        centos_7
    else
        echo "$not_supported_msg"
        exit 1
    fi

elif [ "$os" = "RedHatEnterpriseServer" ]; then
    if [ "$major_release" = "6" ]; then
        rhel_6
    elif [ "$major_release" = "7" ]; then
        rhel_7
    else
        echo "$not_supported_msg"
        exit 1
    fi
else
    echo "$not_supported_msg"
    exit 1
fi
"""
} # end bootstrap-script


# Instant Templates

instances {

    master {
        image: ${?common-instanceTemplate.base.image}
        type: ${?common-instanceTemplate.base.type}
        computeResourceGroup: ${?common-instanceTemplate.master.computeResourceGroup}
        networkSecurityGroupResourceGroup: ${?common-instanceTemplate.base.networkSecurityGroupResourceGroup}
        networkSecurityGroup: ${?common-instanceTemplate.base.networkSecurityGroup}
        virtualNetworkResourceGroup: ${?common-instanceTemplate.base.virtualNetworkResourceGroup}
        virtualNetwork: ${?common-instanceTemplate.base.virtualNetwork}
        subnetName: ${?common-instanceTemplate.base.subnetName}
        instanceNamePrefix: ${?common-instanceTemplate.master.instanceNamePrefix}
        hostFqdnSuffix: ${?common-instanceTemplate.base.hostFqdnSuffix}
        availabilitySet: ${?common-instanceTemplate.master.availabilitySet}
        publicIP: ${?common-instanceTemplate.master.publicIP}
        storageAccountType: ${?common-instanceTemplate.master.storageAccountType}
        dataDiskCount: ${?common-instanceTemplate.master.dataDiskCount}
        dataDiskSize: ${?common-instanceTemplate.master.dataDiskSize}
        managedDisks: ${?common-instanceTemplate.master.managedDisks}
        tags: ${?common-instanceTemplate.base.tags}
        bootstrapScripts: [ ${?bootstrap-script.os-generic} ]
    }

    worker {
        image: ${?common-instanceTemplate.base.image}
        type: ${?common-instanceTemplate.base.type}
        computeResourceGroup: ${?common-instanceTemplate.worker.computeResourceGroup}
        networkSecurityGroupResourceGroup: ${?common-instanceTemplate.base.networkSecurityGroupResourceGroup}
        networkSecurityGroup: ${?common-instanceTemplate.base.networkSecurityGroup}
        virtualNetworkResourceGroup: ${?common-instanceTemplate.base.virtualNetworkResourceGroup}
        virtualNetwork: ${?common-instanceTemplate.base.virtualNetwork}
        subnetName: ${?common-instanceTemplate.base.subnetName}
        instanceNamePrefix: ${?common-instanceTemplate.worker.instanceNamePrefix}
        hostFqdnSuffix: ${?common-instanceTemplate.base.hostFqdnSuffix}
        availabilitySet: ${?common-instanceTemplate.worker.availabilitySet}
        publicIP: ${?common-instanceTemplate.worker.publicIP}
        storageAccountType: ${?common-instanceTemplate.worker.storageAccountType}
        dataDiskCount: ${?common-instanceTemplate.worker.dataDiskCount}
        dataDiskSize: ${?common-instanceTemplate.worker.dataDiskSize}
        managedDisks: ${?common-instanceTemplate.worker.managedDisks}
        tags: ${?common-instanceTemplate.base.tags}
        bootstrapScripts: [ ${?bootstrap-script.os-generic} ]
    }

    edge {
        image: ${?common-instanceTemplate.base.image}
        type: ${?common-instanceTemplate.base.type}
        computeResourceGroup: ${?common-instanceTemplate.edge.computeResourceGroup}
        networkSecurityGroupResourceGroup: ${?common-instanceTemplate.base.networkSecurityGroupResourceGroup}
        networkSecurityGroup: ${?common-instanceTemplate.base.networkSecurityGroup}
        virtualNetworkResourceGroup: ${?common-instanceTemplate.base.virtualNetworkResourceGroup}
        virtualNetwork: ${?common-instanceTemplate.base.virtualNetwork}
        subnetName: ${?common-instanceTemplate.base.subnetName}
        instanceNamePrefix: ${?common-instanceTemplate.edge.instanceNamePrefix}
        hostFqdnSuffix: ${?common-instanceTemplate.base.hostFqdnSuffix}
        availabilitySet: ${?common-instanceTemplate.edge.availabilitySet}
        publicIP: ${?common-instanceTemplate.edge.publicIP}
        storageAccountType: ${?common-instanceTemplate.edge.storageAccountType}
        dataDiskCount: ${?common-instanceTemplate.edge.dataDiskCount}
        dataDiskSize: ${?common-instanceTemplate.edge.dataDiskSize}
        managedDisks: ${?common-instanceTemplate.edge.managedDisks}
        tags: ${?common-instanceTemplate.base.tags}
        bootstrapScripts: [ ${?bootstrap-script.os-generic} ]
    }

} # End instance templates


#
# Configuration for Cloudera Manager. Cloudera Altus Director can use an existing Cloudera Manager
# or bootstrap everything from scratch for a new cluster
#

cloudera-manager {

    instance: ${instances.edge} {
        tags {
            application: "Cloudera Manager 6"
        }
    }

    #
    # Licensing configuration
    #
    # There are three mutually exclusive options for setting up Cloudera Manager's license.
    # 1. License text may be embedded in this file using the "license" field. Triple quotes (""")
    #    are recommended for including multi-line text strings.
    # 2. The "licensePath" can be used to specify the path to a file containing the license.
    # 3. The "enableEnterpriseTrial" flag indicates whether the 60-Day Cloudera Enterprise Trial
    #    should be activated when no license is present. This must not be set to true if a
    #    license is included using either "license" or "licensePath".

    #
    # Embed a license for Cloudera Manager
    #

    # license: """
    #   -----BEGIN PGP SIGNED MESSAGE-----
    #   Hash: SHA1
    #
    # {
    #   "version"        : 1,
    #   "name"           : "License Owner",
    #   "uuid"           : "license id",
    #   "expirationDate" : 0,
    #   "features"       : [ "FEATURE1", "FEATURE2" ]
    # }
    # -----BEGIN PGP SIGNATURE-----
    # Version: GnuPG v1.4.11 (GNU/Linux)
    #
    # PGP SIGNATURE
    # -----END PGP SIGNATURE-----
    # """

    #
    # Include a license for Cloudera Manager from an external file
    #

    # licensePath: "/path/to/license.txt.asc"

    #
    # Specify the billingId.
    #
    # Cloudera Altus Director will use the billing ID to report usage information to a metering service
    # for usage based billing.
    #
    # Usage reporting starts as soon as you assign a billing ID and a license to a Cloudera Manager.
    # If you remove a billing ID, Director will stop reporting to the metering service.
    #
    # When usage reporting stops, you will not have access to Cloudera Support with this deployment.
    # If you want a billing ID, please contact Cloudera.
    #

    # billingId: "billingId_REPLACE_ME"

    #
    # Activate 60-Day Cloudera Enterprise Trial
    #

    enableEnterpriseTrial: true

    #
    # Install unlimited strength JCE policy files along with Cloudera Manager
    #

    # unlimitedJce: true

    #
    # Optional database configuration
    #
    # There are three mutually exclusive options for database usage in Cloudera Altus Director.
    # 1. This option is NOT supported for production use.
    #    With no configuration, an embedded PostgreSQL database will be used.
    # 2. Alternatively, existing external databases can be used.
    # 3. Finally, databases can be created on the fly on existing external database servers.

    #
    # Optional configuration for existing external databases
    #
    # databases {
    #     CLOUDERA_MANAGER {
    #         type: postgresql
    #
    #         host: db.example.com
    #         port: 123
    #
    #         user: admin
    #         password: 1231ed
    #
    #         name: scm
    #     }
    #
    #     ACTIVITYMONITOR { ... }
    #
    #     REPORTSMANAGER { ... }
    #
    #     NAVIGATOR { ... }
    #
    #     # Added in Cloudera Manager 5.2+
    #     NAVIGATORMETASERVER { ... }
    # }

    #
    # Optional configuration for creating external databases on the fly
    #
    # When a database is created on the fly, Director generates a random database name using the specified database
    # name prefix, a random username based on the specified username prefix, and a random password. The password is
    # stored by Director and made available to the service that uses the database. If multiple services reference the
    # same external database server, Director will create a database for each.
    #
    # MySQL limits usernames to sixteen characters. Therefore, limit usernamePrefix values for databases on MySQL to
    # seven characters; the remaining nine characters are used by the randomized suffix generated by Director.
    #

    databaseTemplates {
        CLOUDERA_MANAGER {
            name: cmtemplate
            databaseServerName: productionDB # Must correspond to an external database server named above
            databaseNamePrefix: scm
            usernamePrefix: cmadmin
        }

        ACTIVITYMONITOR {
            name: amontemplate
            databaseServerName: productionDB # Must correspond to an external database server named above
            databaseNamePrefix: amon
            usernamePrefix: amadmin
        }

        REPORTSMANAGER {
            name: rmantemplate
            databaseServerName: productionDB # Must correspond to an external database server named above
            databaseNamePrefix: rman
            usernamePrefix: rmadmin
        }

        NAVIGATOR {
            name: navtemplate
            databaseServerName: productionDB # Must correspond to an external database server named above
            databaseNamePrefix: nav
            usernamePrefix: nadmin
        }

        # Added in Cloudera Manager 5.2+
        NAVIGATORMETASERVER {
            name: navmetatemplate
            databaseServerName: productionDB # Must correspond to an external database server named above
            databaseNamePrefix: navmeta
            usernamePrefix: nmadmin
        }
    }

    #
    # Configuration to override Cloudera Manager package repositories
    #

    # repository: "https://archive.cloudera.com/cm5/redhat/6/x86_64/cm/5.13/"
    # repositoryKeyUrl: "https://archive.cloudera.com/cm5/redhat/6/x86_64/cm/RPM-GPG-KEY-cloudera"

    # OR use an existing Cloudera Manager installation

    # hostname: "192.168.33.10"
    # username: <if not default 'admin'>
    # password: <if not default 'admin'>

    #
    # Optional configuration for Cloudera Manager and its management services
    #
    # Configuration properties for CLOUDERA_MANAGER are documented at
    # https://www.cloudera.com/documentation/enterprise/6/properties/6.1/topics/cm_props_cmserver.html
    #
    # Configuration properties for the Cloudera Management services are documented at
    # https://www.cloudera.com/documentation/enterprise/6/properties/6.1/topics/cm_props_mgmtservice.html
    #
    # Configuration properties for Hosts are documented at
    # https://www.cloudera.com/documentation/enterprise/6/properties/6.1/topics/cm_props_host.html
    #

    configs {
        # CLOUDERA_MANAGER corresponds to the Cloudera Manager Server configuration options
        CLOUDERA_MANAGER {
            # enable_api_debug: false
            custom_banner_html: "Managed by Cloudera Altus Director"
        }

        # CLOUDERA_MANAGEMENT_SERVICE corresponds to the Service-Wide configuration options
        CLOUDERA_MANAGEMENT_SERVICE {
            # enable_alerts : false
            # enable_config_alerts : false
        }

        SERVICEMONITOR {
            mgmt_log_dir:/data0/log/cloudera-scm-firehose
            firehose_storage_dir:/data0/lib/cloudera-service-monitor
        }

        ACTIVITYMONITOR {
            mgmt_log_dir:/data0/log/cloudera-scm-firehose
        }

        HOSTMONITOR {
            mgmt_log_dir: /data0/log/cloudera-scm-firehose
            firehose_storage_dir: /data0/lib/cloudera-host-monitor
        }

        REPORTSMANAGER {
            headlamp_scratch_dir: /data0/lib/cloudera-scm-headlamp
            mgmt_log_dir: /data0/log/cloudera-scm-headlamp
        }

        EVENTSERVER {
            mgmt_log_dir:/data0/log/cloudera-scm-eventserver
            eventserver_index_dir:/data0/lib/cloudera-scm-eventserver
        }

        ALERTPUBLISHER {
            mgmt_log_dir:/data0/log/cloudera-scm-alertpublisher
        }

        NAVIGATOR {
            mgmt_log_dir:/data0/log/cloudera-scm-navigator
        }

        NAVIGATORMETASERVER {
            audit_event_log_dir:/data0/log/cloudera-scm-navigator/audit
            data_dir:/data0/lib/cloudera-scm-navigator
            mgmt_log_dir:/data0/log/cloudera-scm-navigator
        }

        # Configuration properties for all hosts
        HOSTS {
        }
    }
} # End CM configuration


#
# Simple single-master Cluster description
#

cluster {

    # List the products and their versions that need to be installed. Each
    # product must have a corresponding parcel in the parcelRepositories
    # configured in this section. The specified version for a product will be
    # used to find a suitable parcel. Specifying a version that is satisfied by
    # more than one parcel among those available will result in a configuration
    # error. Specify more granular versions to avoid conflicts.

    products {
        CDH: 6
    }

    #
    # Optional override of parcel repositories
    #

    # parcelRepositories: ["https://archive.cloudera.com/cdh6/6.1.0/parcels/"]

    services: [HDFS, YARN, ZOOKEEPER, HBASE, HIVE, HUE, IMPALA, OOZIE, SPARK_ON_YARN]

    #
    # Optional custom service configurations
    # Configuration keys containing periods must be enclosed in double quotes.
    #

    configs {
        # HDFS fencing should be set to true for HA configurations
        HDFS {
            dfs_replication: "3"
            dfs_block_local_path_access_user: "impala,hbase,mapred,spark"

            #
            # Optional configuration for Azure Data Lake Storage usage with
            # CDH. This requires that a valid service principle be created and
            # granted permission to access the ADLS account. See
            # https://www.cloudera.com/documentation/enterprise/latest/topics/admin_adls_config.html
            # for configuration details.
            #

            # core_site_safety_valve: """
            #     <property>
            #         <name>dfs.adls.oauth2.access.token.provider.type</name>
            #         <value>ClientCredential</value>
            #     </property>
            #     <property>
            #         <name>dfs.adls.oauth2.client.id</name>
            #         <value>client_id_REPLACE_ME</value>
            #     </property>
            #     <property>
            #         <name>dfs.adls.oauth2.credential</name>
            #         <value>client_secret_REPLACE_ME</value>
            #     </property>
            #     <property>
            #         <name>dfs.adls.oauth2.refresh.url</name>
            #         <value>refresh_url_REPLACE_ME</value>
            #     </property>
            # """
        }

        HIVE {
            audit_event_log_dir: /data0/log/hive/audit
            lineage_event_log_dir: /data0/log/hive/lineage
        }

        HBASE {
            audit_event_log_dir: /data0/log/hbase/audit
        }
    }

    #
    # Optional configuration for existing external database for Hive Metastore, Hue,
    # and Oozie databases
    #

    # databases {
    #     HIVE {
    #         type: postgresql
    #         host: db.example.com
    #         port: 123
    #         user: hive
    #         password: pass
    #         name: hive_db
    #     }
    #     HUE {
    #         type: postgresql
    #         host: db.example.com
    #         port: 123
    #         user: hue
    #         password: pass
    #         name: hue_db
    #     }
    #     OOZIE {
    #         type: postgresql
    #         host: db.example.com
    #         port: 123
    #         user: oozie
    #         password: pass
    #         name: oozie_db
    #     }
    # }

    #
    # Optional configuration for creating external database on the fly for Hive Metastore
    # Hue, and Oozie databases
    #

    databaseTemplates: {
        HIVE {
            name: hivetemplate
            databaseServerName: productionDB # Must correspond to an external database server named above
            databaseNamePrefix: hivemetastore
            usernamePrefix: hive
        }

        HUE {
            name: huetemplate
            databaseServerName: productionDB # Must correspond to an external database server named above
            databaseNamePrefix: huedb
            usernamePrefix: hue
        }

        OOZIE {
            name: oozietemplate
            databaseServerName: productionDB # Must correspond to an external database server named above
            databaseNamePrefix: ooziedb
            usernamePrefix: oozie
        }
    }

    #
    # This reference configuration follows the Cloudera Azure Reference Architecture, modified
    # for a simple single-master cluster.
    #

    masters {
        count: 1

        instance: ${instances.master} {
            tags {
                group: masters
            }
        }

        roles {
            ZOOKEEPER: [SERVER]
            HDFS: [NAMENODE, SECONDARYNAMENODE]
            YARN: [RESOURCEMANAGER, JOBHISTORY]
            HBASE: [MASTER, HBASETHRIFTSERVER] # Alternately [HBASERESTSERVER], for HUE Integration
            HUE: [HUE_SERVER]
            OOZIE: [OOZIE_SERVER]
            IMPALA: [CATALOGSERVER, STATESTORE]
            HIVE: [HIVESERVER2, HIVEMETASTORE, WEBHCAT]
            SPARK_ON_YARN: [SPARK_YARN_HISTORY_SERVER]
        }

        configs {
            HDFS {
                NAMENODE {
                    namenode_log_dir: /data0/log/hadoop-hdfs
                    dfs_name_dir_list: /data1/dfs/nn
                }
                SECONDARYNAMENODE {
                    secondarynamenode_log_dir: /data0/log/hadoop-hdfs
                    fs_checkpoint_dir_list: /data3/dfs/snn
                }
            }
            ZOOKEEPER {
                SERVER {
                    zk_server_log_dir: /data0/log/zookeeper
                    dataDir: /data2/zookeeper
                    dataLogDir: /data2/zookeeper
                    maxClientCnxns: 1024
                }
            }
            YARN {
              RESOURCEMANAGER {
                resource_manager_log_dir: /data0/log/hadoop-yarn
              }
              JOBHISTORY {
                  mr2_jobhistory_log_dir: /data0/log/hadoop-mapreduce
              }
            }
            HBASE {
              MASTER {
                  hbase_master_log_dir: /data0/log/hbase
              }
              HBASETHRIFTSERVER {
                  hbase_thriftserver_log_dir: /data0/log/hbase
              }
              #HBASERESTSERVER {
              #    hbase_restserver_log_dir: /data0/log/hbase
              #}
            }
            HIVE {
                HIVEMETASTORE {
                    hive_log_dir: /data0/log/hive
                }
                HIVESERVER2 {
                    hive_log_dir: /data0/log/hive
                }
                WEBHCAT {
                    hcatalog_log_dir: /data0/log/hcatalog
                }
            }
            OOZIE {
                OOZIE_SERVER {
                    oozie_plugins_list: "org.apache.oozie.service.ZKLocksService,org.apache.oozie.service.ZKXLogStreamingService,org.apache.oozie.service.ZKJobsConcurrencyService,org.apache.oozie.service.ZKUUIDService"
                    oozie_log_dir: /data0/log/oozie
                }
            }
            HUE {
                HUE_SERVER {
                    hue_server_log_dir: /data0/log/hue
                }
            }
            IMPALA {
                CATALOGSERVER {
                    log_dir: /data0/log/catalogd
                }
                STATESTORE {
                    log_dir: /data0/log/statestore
                }
            }
            SPARK_ON_YARN {
                SPARK_YARN_HISTORY_SERVER {
                    log_dir: /data0/log/spark
                }
            }
            #HBASE {
            #}
        }
    }

    workers {
        #
        # The desired number of instances to provision. Cloudera Altus Director will attempt to allocate
        # this many instances but will not fail the deployment as long as the minimum number of
        # instances (specified with minCount below) is allocated. If minCount is not specified
        # then minCount is set to count.
        #
        count: 3

        #
        # Minimum number of instances required to set up the cluster.
        # Fail and quit if minCount number of instances is not available in this cloud
        # environment. Else, continue setting up the cluster. If minCount is not defined then
        # minCount defaults to count.
        #
        minCount: 3

        instance: ${instances.worker} {
            tags {
                group: worker
            }
        }

        roles {
            HDFS: [DATANODE]
            YARN: [NODEMANAGER]
            HBASE: [REGIONSERVER]
            IMPALA: [IMPALAD]
        }

        # Optional custom role configurations
        # Configuration keys containing periods must be enclosed in double quotes.
        configs {
            HDFS {
                DATANODE {
                    datanode_log_dir: /data0/log/hadoop-hdfs
                    dfs_data_dir_list: "/data1/dfs/dn,/data2/dfs/dn,/data3/dfs/dn,/data4/dfs/dn,/data5/dfs/dn,/data6/dfs/dn,/data7/dfs/dn,/data8/dfs/dn,/data9/dfs/dn,/data10/dfs/dn"
                    dfs_datanode_failed_volumes_tolerated: 1
                }
            }
            YARN {
                NODEMANAGER {
                    node_manager_log_dir: /data0/log/hadoop-yarn
                    yarn_nodemanager_log_dirs: "/data1/log/hadoop-yarn/container,/data2/log/hadoop-yarn/container,/data3/log/hadoop-yarn/container,/data4/log/hadoop-yarn/container,/data5/log/hadoop-yarn/container,/data6/log/hadoop-yarn/container,/data7/log/hadoop-yarn/container,/data8/log/hadoop-yarn/container,/data9/log/hadoop-yarn/container,/data10/log/hadoop-yarn/container"
                    yarn_nodemanager_local_dirs: "/data1/yarn,/data2/yarn,/data3/yarn,/data4/yarn,/data5/yarn,/data6/yarn,/data7/yarn,/data8/yarn,/data9/yarn,/data10/yarn"
                }
            }
            HBASE {
                REGIONSERVER {
                    hbase_regionserver_log_dir: /data0/log/hbase
                }
            }
            IMPALA {
                IMPALAD {
                    log_dir: /data0/log/impalad
                    lineage_event_log_dir: /data0/log/impalad/lineage
                    audit_event_log_dir: /data0/log/impalad/audit
                    scratch_dirs: "/data1/impala/impalad,/data2/impala/impalad,/data3/impala/impalad,/data4/impala/impalad,/data5/impala/impalad,/data6/impala/impalad,/data7/impala/impalad,/data8/impala/impalad,/data9/impala/impalad,/data10/impala/impalad"
                }
            }
        }
    }

    gateways {
        #
        # The desired number of instances to provision. Cloudera Altus Director will attempt to allocate
        # this many instances but will not fail the deployment as long as the minimum number of
        # instances (specified with minCount below) is allocated. If minCount is not specified
        # then minCount is set to count.
        #
        count: 1

        instance: ${instances.edge} {
            tags {
                group: edge
            }
        }

        roles {
            HIVE: [GATEWAY]
            HBASE: [GATEWAY]
            SPARK_ON_YARN: [GATEWAY]
        }

        configs {
            SPARK_ON_YARN {
                GATEWAY {
                    lineage_event_log_dir : /data0/log/spark/lineage
                }
            }
        }
    }
}