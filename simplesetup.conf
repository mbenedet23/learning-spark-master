name: cluster1
environmentName: Azure-nonHA
deploymentName: Cloudera-Manager-on-Azure

provider {
    type: azure
    region: "eastus"
    azureCloudEnvironment: "azure"
    subscriptionId: "0858ffa5-d2dd-420f-a958-85f6911ceffe"
	0bcf99c0-045f-451f-b4ed-bb9a0be9f403
    tenantId: "3ac94b33-9135-4821-9502-eafda6592a35"
    clientId: "6cab9cf1-9b9a-438a-a867-bfec7c7f05b3"
    clientSecret: "MJHFCAGfOAo1lkgUn8kmAdbNGXj0YWxZJHdUccUQnUs="
}

ssh {
    username: "mketinen"
    password: "Anusha123"
}

common-instanceTemplate {
    base {
        type: Standard_DS12_v2
        image: rhel7-2018q2v1-eastus
        networkSecurityGroupResourceGroup: "AZR-ADB-VPCx"
        networkSecurityGroup: "AZR-ADB-nsg-eastus"
        virtualNetworkResourceGroup: "VPCxAzureConsumerNA"
        virtualNetwork: "VPCxAzureConsumerNA-eastus"
        subnetName: "AZR-ADB-Hybrid-1"
        hostFqdnSuffix: "azredlcloudera"
        tags {
            owner: abaseerm
        }
    }
	
    master {
        computeResourceGroup="AZR-ADB-DEVBIDATALAKE-Development"
		availabilitySet: "EDLAzureAvailabilitySet-Masters"
        instanceNamePrefix: "edlmaster"
        storageAccountType: "Premium_LRS"
        dataDiskCount: 2
        dataDiskSize: 32
        managedDisks: Yes
        publicIP: No
    }
	
    worker {
		computeResourceGroup="AZR-ADB-DEVBIDATALAKE-Development"
        availabilitySet: "EDLAzureAvailabilitySet-Worker"
        instanceNamePrefix: "edlworker"
        storageAccountType: "Standard_LRS"
        dataDiskCount: 2
        dataDiskSize: 250
        managedDisks: Yes
        publicIP: No
    }

    edge {
        computeResourceGroup="AZR-ADB-DEVBIDATALAKE-Development"
		availabilitySet: "EDLAzureAvailabilitySet-Masters"
        instanceNamePrefix: "edledge"
        storageAccountType: "Premium_LRS"
        dataDiskCount: 1
        dataDiskSize: 256
        managedDisks: Yes
        publicIP: No
    }
}

instances {

    master {
        image: ${?common-instanceTemplate.base.image}
        type: ${?common-instanceTemplate.base.type}
        computeResourceGroup: ${?common-instanceTemplate.master.computeResourceGroup}
        networkSecurityGroupResourceGroup: ${?common-instanceTemplate.base.networkSecurityGroupResourceGroup}
        networkSecurityGroup: ${?common-instanceTemplate.base.networkSecurityGroup}
        virtualNetworkResourceGroup: ${?common-instanceTemplate.base.virtualNetworkResourceGroup}
        virtualNetwork: ${?common-instanceTemplate.base.virtualNetwork}
        subnetName: ${?common-instanceTemplate.base.subnetName}
        instanceNamePrefix: ${?common-instanceTemplate.master.instanceNamePrefix}
        hostFqdnSuffix: ${?common-instanceTemplate.base.hostFqdnSuffix}
        availabilitySet: ${?common-instanceTemplate.master.availabilitySet}
        publicIP: ${?common-instanceTemplate.master.publicIP}
        storageAccountType: ${?common-instanceTemplate.master.storageAccountType}
        dataDiskCount: ${?common-instanceTemplate.master.dataDiskCount}
        dataDiskSize: ${?common-instanceTemplate.master.dataDiskSize}
        managedDisks: ${?common-instanceTemplate.master.managedDisks}
        tags: ${?common-instanceTemplate.base.tags}
    }

    worker {
        image: ${?common-instanceTemplate.base.image}
        type: ${?common-instanceTemplate.base.type}
        computeResourceGroup: ${?common-instanceTemplate.worker.computeResourceGroup}
        networkSecurityGroupResourceGroup: ${?common-instanceTemplate.base.networkSecurityGroupResourceGroup}
        networkSecurityGroup: ${?common-instanceTemplate.base.networkSecurityGroup}
        virtualNetworkResourceGroup: ${?common-instanceTemplate.base.virtualNetworkResourceGroup}
        virtualNetwork: ${?common-instanceTemplate.base.virtualNetwork}
        subnetName: ${?common-instanceTemplate.base.subnetName}
        instanceNamePrefix: ${?common-instanceTemplate.worker.instanceNamePrefix}
        hostFqdnSuffix: ${?common-instanceTemplate.base.hostFqdnSuffix}
        availabilitySet: ${?common-instanceTemplate.worker.availabilitySet}
        publicIP: ${?common-instanceTemplate.worker.publicIP}
        storageAccountType: ${?common-instanceTemplate.worker.storageAccountType}
        dataDiskCount: ${?common-instanceTemplate.worker.dataDiskCount}
        dataDiskSize: ${?common-instanceTemplate.worker.dataDiskSize}
        managedDisks: ${?common-instanceTemplate.worker.managedDisks}
        tags: ${?common-instanceTemplate.base.tags}
    }

    edge {
        image: ${?common-instanceTemplate.base.image}
        type: ${?common-instanceTemplate.base.type}
        computeResourceGroup: ${?common-instanceTemplate.edge.computeResourceGroup}
        networkSecurityGroupResourceGroup: ${?common-instanceTemplate.base.networkSecurityGroupResourceGroup}
        networkSecurityGroup: ${?common-instanceTemplate.base.networkSecurityGroup}
        virtualNetworkResourceGroup: ${?common-instanceTemplate.base.virtualNetworkResourceGroup}
        virtualNetwork: ${?common-instanceTemplate.base.virtualNetwork}
        subnetName: ${?common-instanceTemplate.base.subnetName}
        instanceNamePrefix: ${?common-instanceTemplate.edge.instanceNamePrefix}
        hostFqdnSuffix: ${?common-instanceTemplate.base.hostFqdnSuffix}
        availabilitySet: ${?common-instanceTemplate.edge.availabilitySet}
        publicIP: ${?common-instanceTemplate.edge.publicIP}
        storageAccountType: ${?common-instanceTemplate.edge.storageAccountType}
        dataDiskCount: ${?common-instanceTemplate.edge.dataDiskCount}
        dataDiskSize: ${?common-instanceTemplate.edge.dataDiskSize}
        managedDisks: ${?common-instanceTemplate.edge.managedDisks}
        tags: ${?common-instanceTemplate.base.tags}
    }

} 

cloudera-manager {

    instance: ${instances.edge} {
        tags {
            application: "Cloudera Manager 5"
        }
    }

    enableEnterpriseTrial: true
    unlimitedJce: true

    configs {
        # CLOUDERA_MANAGER corresponds to the Cloudera Manager Server configuration options
        CLOUDERA_MANAGER {
            # enable_api_debug: false
            custom_banner_html: "Managed by Cloudera Altus Director"
        }

        # CLOUDERA_MANAGEMENT_SERVICE corresponds to the Service-Wide configuration options
        CLOUDERA_MANAGEMENT_SERVICE {
            # enable_alerts : false
            # enable_config_alerts : false
        }

        SERVICEMONITOR {
            mgmt_log_dir:/data0/log/cloudera-scm-firehose
            firehose_storage_dir:/data0/lib/cloudera-service-monitor
        }

        ACTIVITYMONITOR {
            mgmt_log_dir:/data0/log/cloudera-scm-firehose
        }

        HOSTMONITOR {
            mgmt_log_dir: /data0/log/cloudera-scm-firehose
            firehose_storage_dir: /data0/lib/cloudera-host-monitor
        }

        REPORTSMANAGER {
            headlamp_scratch_dir: /data0/lib/cloudera-scm-headlamp
            mgmt_log_dir: /data0/log/cloudera-scm-headlamp
        }

        EVENTSERVER {
            mgmt_log_dir:/data0/log/cloudera-scm-eventserver
            eventserver_index_dir:/data0/lib/cloudera-scm-eventserver
        }

        ALERTPUBLISHER {
            mgmt_log_dir:/data0/log/cloudera-scm-alertpublisher
        }

        NAVIGATOR {
            mgmt_log_dir:/data0/log/cloudera-scm-navigator
        }

        NAVIGATORMETASERVER {
            audit_event_log_dir:/data0/log/cloudera-scm-navigator/audit
            data_dir:/data0/lib/cloudera-scm-navigator
            mgmt_log_dir:/data0/log/cloudera-scm-navigator
        }

        # Configuration properties for all hosts
        HOSTS {
        }
    }
} 

cluster {

    products {
        CDH: 5
    }

	parcelRepositories: ["https://archive.cloudera.com/cdh5/parcels/5.15.2/"]
    services: [HDFS, YARN, ZOOKEEPER, HIVE, HUE, IMPALA, OOZIE, SPARK_ON_YARN]

    configs {
        HDFS {
            dfs_replication: "1"
            dfs_block_local_path_access_user: "impala,mapred,spark"
        }

        HIVE {
            audit_event_log_dir: /data0/log/hive/audit
            lineage_event_log_dir: /data0/log/hive/lineage
        }
    }
	
    masters {
        count: 1

        instance: ${instances.master} {
            tags {
                group: masters
            }
        }

        roles {
            ZOOKEEPER: [SERVER]
            HDFS: [NAMENODE, SECONDARYNAMENODE]
            YARN: [RESOURCEMANAGER, JOBHISTORY]
            HUE: [HUE_SERVER]
            OOZIE: [OOZIE_SERVER]
            IMPALA: [CATALOGSERVER, STATESTORE]
            HIVE: [HIVESERVER2, HIVEMETASTORE, WEBHCAT]
            SPARK_ON_YARN: [SPARK_YARN_HISTORY_SERVER]
        }
        configs {
            HDFS {
                NAMENODE {
                    namenode_log_dir: /data0/log/hadoop-hdfs
                    dfs_name_dir_list: /data1/dfs/nn
                }
                SECONDARYNAMENODE {
                    secondarynamenode_log_dir: /data0/log/hadoop-hdfs
                    fs_checkpoint_dir_list: /data3/dfs/snn
                }
            }
            ZOOKEEPER {
                SERVER {
                    zk_server_log_dir: /data0/log/zookeeper
                    dataDir: /data2/zookeeper
                    dataLogDir: /data2/zookeeper
                    maxClientCnxns: 1024
                }
            }
            YARN {
              RESOURCEMANAGER {
                resource_manager_log_dir: /data0/log/hadoop-yarn
              }
              JOBHISTORY {
                  mr2_jobhistory_log_dir: /data0/log/hadoop-mapreduce
              }
            }
            HIVE {
                HIVEMETASTORE {
                    hive_log_dir: /data0/log/hive
                }
                HIVESERVER2 {
                    hive_log_dir: /data0/log/hive
                }
                WEBHCAT {
                    hcatalog_log_dir: /data0/log/hcatalog
                }
            }
            OOZIE {
                OOZIE_SERVER {
                    oozie_plugins_list: "org.apache.oozie.service.ZKLocksService,org.apache.oozie.service.ZKXLogStreamingService,org.apache.oozie.service.ZKJobsConcurrencyService,org.apache.oozie.service.ZKUUIDService"
                    oozie_log_dir: /data0/log/oozie
                }
            }
            HUE {
                HUE_SERVER {
                    hue_server_log_dir: /data0/log/hue
                }
            }
            IMPALA {
                CATALOGSERVER {
                    log_dir: /data0/log/catalogd
                }
                STATESTORE {
                    log_dir: /data0/log/statestore
                }
            }
            SPARK_ON_YARN {
                SPARK_YARN_HISTORY_SERVER {
                    log_dir: /data0/log/spark
                }
            }
        }
    }

    workers {    
        count: 1
        minCount: 1
        instance: ${instances.worker} {
            tags {
                group: worker
            }
        }
        roles {
            HDFS: [DATANODE]
            YARN: [NODEMANAGER]
            IMPALA: [IMPALAD]
        }
        configs {
            HDFS {
                DATANODE {
                    datanode_log_dir: /data0/log/hadoop-hdfs
                    dfs_data_dir_list: "/data1/dfs/dn"
                    dfs_datanode_failed_volumes_tolerated: 1
                }
            }
            YARN {
                NODEMANAGER {
                    node_manager_log_dir: /data0/log/hadoop-yarn
                    yarn_nodemanager_log_dirs: "/data1/log/hadoop-yarn/container"
                    yarn_nodemanager_local_dirs: "/data1/yarn"
                }
            }
            IMPALA {
                IMPALAD {
                    log_dir: /data0/log/impalad
                    lineage_event_log_dir: /data0/log/impalad/lineage
                    audit_event_log_dir: /data0/log/impalad/audit
                    scratch_dirs: "/data1/impala/impalad"
                }
            }
        }
    }

    gateways {
        count: 1
        instance: ${instances.edge} {
            tags {
                group: edge
            }
        }
        roles {
            HIVE: [GATEWAY]
            SPARK_ON_YARN: [GATEWAY]
        }
        configs {
            SPARK_ON_YARN {
                GATEWAY {
                    lineage_event_log_dir : /data0/log/spark/lineage
                }
            }
        }
    }
}

