
=================================
Cluster Build Doc:
=================================


1.  Create symlink
2.  Install java
3.  Place the cloudera.repo on all nodes (6.2)
4.  Install krb5-workstation and krb5-libs.
5.  Install CM server and CM Agent
6.  Install mysql
7.  Install jdbc driver
8.  Create the databases required for the Cloudera Manager in MySQL
9.  Install JCE files.
10. Certs gerneration - Refer SSL Certs generation document of Avinash.
11. Change permissions for (python2.7/site-packages) packages to resolve Hue databases connection verification issue.
12. Cloudera Manager install setup.
13. Create directory for Hbase.
14. Enable HA.
15. Enabling Kerberos.

-------------------------------------------------
STEP 1:
-----------------
# Symlink (1)

mkdir -p /apps/opt/cloudera
ln -s /apps/opt/cloudera/ /opt/cloudera

===================
For zookeeper servers:

mkdir /apps/var/lib
chmod 771 /apps/var/lib
mv /var/lib/zookeeper /apps/var/lib/.
ln -s /apps/var/lib/zookeeper /var/lib/zookeeper

mkdir /apps/log
chmod 771 /apps/log
mv /var/log/zookeeper /apps/log/.
ln -s /apps/log/zookeeper /var/log/zookeeper 
-----------------------------------------------------------------------------------------------
For CM server:

mv /var/lib/cloudera-scm-headlamp /apps/var/lib/.
ln -s /apps/var/lib/cloudera-scm-headlamp /var/lib/cloudera-scm-headlamp 

--------------------------------------------------------------------------------------------------
on Hive Server 2  Hosts 773 and  796:
cd /var/log/hive 

mv /var/log/hive /apps/log/.
ln -s /apps/log/hive /var/log/hive 

---------------------------------------------------------------------

mv /var/log/hcatalog /apps/log/.
ln -s /apps/log/hcatalog  /var/log/hcatalog

--------------------------------------------------------------------------
For Hue servers:

on 796 host:

mv /var/log/hue /apps/log/.
ln -s /apps/log/hue /var/log/hue  
--------------------------------------------------------------------------

for Impala on 777 Host:

mv /var/log/statestore /apps/log/.
ln -s /apps/log/statestore /var/log/statestore

mv /var/log/catalogd /apps/log/.
ln -s /apps/log/catalogd /var/log/catalogd 

------------------------------------------------------------------------------
fro Impala daemon on all datanodes: 778, 793, 792, 776, 797:


mkdir /apps/log
chmod 771 /apps/log
mv /var/log/impalad  /apps/log/.
ln -s /apps/log/impalad /var/log/impalad  

------------------------------------------------------------------------------------

oozie on 796 Host:

mv /var/log/oozie /apps/log/.
ln -s /apps/log/oozie /var/log/oozie 
---------------------------------------------------------------------------------------

SOLR on all datanodes: 778, 793, 792, 776, 777, 797:

mv /var/log/solr /apps/log/.
ln -s /apps/log/solr /var/log/solr

----------------------------------------------------------------------------

for Spark on 796 Host:

mv /var/log/spark /apps/log/.
ln -s /apps/log/spark /var/log/spark 
 
---------------------------------------------------------------------
for YARN on 777 host
mv /var/log/hadoop-mapreduce /apps/log/.
ln -s /apps/log/hadoop-mapreduce /var/log/hadoop-mapreduce 
-----------------------------------------------------------------------------------
on all Node Managers on all datanodes: 778, 793, 792, 776, 797:

mv /var/log/hadoop-yarn /apps/log/.
ln -s /apps/log/hadoop-yarn /var/log/hadoop-yarn
mkdir -p /apps/var/lib
chmod 771 /apps/var
chmod 771 /apps/var/lib
mv /var/lib/hadoop-yarn/yarn-nm-recovery /apps/var/lib/.
ln -s /apps/var/lib/yarn-nm-recovery /var/lib/hadoop-yarn/yarn-nm-recovery

----------------------------------------------------------------------------------
on RM 796 host:

mv /var/log/hadoop-yarn /apps/log/.
ln -s /apps/log/hadoop-yarn /var/log/hadoop-yarn 

----------------------------------------------------------------------------------

for HDFS hosts 778, 792, 793, 776, 795, 796, 773

mv /var/log/hadoop-hdfs /apps/log/.
ln -s /apps/log/hadoop-hdfs /var/log/hadoop-hdfs 

on 795:
mkdir /apps/log
chmod 771 /apps/log

on 796 host:
mv /var/log/hadoop-httpfs /apps/log/.
ln -s /apps/log/hadoop-httpfs /var/log/hadoop-httpfs 

-----------------------------------------------------------------------------------

for HBase on 773, 796, 776, 778, 792, 793 host

mv /var/log/hbase /apps/log/.
ln -s /apps/log/hbase /var/log/hbase

-------------------------------------------------------------------------------

774 host

mkdir /apps/var
chmod 771 /apps/var
mv /var/lib/cloudera-scm-headlamp /apps/var/lib/.
ln -s /apps/var/lib/cloudera-scm-headlamp /var/lib/cloudera-scm-headlamp

-----------------------------------------------------------

kudu hosts

mv /var/log/kudu /apps/log/.
ln -s /apps/log/kudu /var/log/kudu


================================

kafka

mv /var/log/cloudera-scm-agent /apps/log/.
ln -s /apps/log/cloudera-scm-agent /var/log/cloudera-scm-agent

/var/log/cloudera-scm-agent



====================

Nifi

/var/log/nifitoolkit 

mv /var/log/nifitoolkit /apps/log/.
ln -s /apps/log/nifitoolkit /var/log/nifitoolkit


/var/log/nifiregistry 
 
mv /var/log/nifiregistry /apps/log/.
ln -s /apps/log/nifiregistry /var/log/nifiregistry



=====================================================
Step 2:
----------------
# install Java (2)

scp jdk-8u181-linux-x64.tar.gz to all the nodes.

mkdir /apps/java
cd /usr
ln -s /apps/java /usr/java
cp /home/asingh57/jdk-8u181-linux-x64.tar.gz /usr/java/
cd /usr/java/
tar -xvf jdk-8u181-linux-x64.tar.gz
chmod -R 775 /apps/java
chmod -R 775 /usr/java/jdk1.8.0_181
chown root:root jdk-8u181-linux-x64.tar.gz
chown -R root:root jdk-8u181
ln -s /apps/java/jdk1.8.0_181/ /usr/java/latest
ln -s /apps/java/jdk1.8.0_181/ /usr/java/default
alternatives --install /usr/bin/java java /usr/java/jdk1.8.0_181/bin/java 2
update-alternatives --config java 
export JAVA_HOME="/usr/java/latest"
export PATH=$JAVA_HOME/bin:$PATH
source /etc/profile
java -version 
---------------------------------------------

Upgrade Java if version is less than below.

-- upgrade Java to 181 (jdk-8u181-linux-x64.tar.gz)
-- download Java from # https://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase8-2177648.html or copy from dev node
-- Run the below commands
cp /home/asingh57/jdk-8u181-linux-x64.tar.gz /usr/java/
cd /usr/java/
tar -xvf jdk-8u181-linux-x64.tar.gz
chmod -R 775 /apps/java
chmod -R 775 /usr/java/jdk1.8.0_181
ln -s /apps/java/jdk1.8.0_181/ /usr/java/latest
ln -s /apps/java/jdk1.8.0_181/ /usr/java/default
alternatives --install /usr/bin/java java /usr/java/jdk1.8.0_181/bin/java 2
update-alternatives --config java 
-- select the number that shows "/usr/java/jdk1.8.0_181/bin/java". It would be mostly 2.

-- permanantly add JAVA_HOME
-- add the below lines to "/etc/profile" at the end of the file1
export JAVA_HOME="/usr/java/latest"
export PATH=$JAVA_HOME/bin:$PATH

-- save and exit vi
-- run the below commands to make it active. 
source /etc/profile
--command  "echo $JAVA_HOME" should show "/usr/java/latest"

=========================================================================================

Step 3 :
----------------- 
wget https://archive.cloudera.com/cm6/6.2.0/redhat7/yum/cloudera-manager.repo

[root@ITSUSRALSP08792:/etc/yum.repos.d]#
#-> cat cloudera-manager.repo
[cloudera-manager]
name=Cloudera Manager 6.2.0
baseurl=https://archive.cloudera.com/cm6/6.2.0/redhat7/yum/
gpgkey=https://archive.cloudera.com/cm6/6.2.0/redhat7/yum/RPM-GPG-KEY-cloudera
gpgcheck=1
enabled=1
autorefresh=0

==================================================================================================
step 4 : 
-----------------
yum install krb5-workstation

yum install krb5-libs  

===========================================================================================================
step 5 : 

yum install cloudera-manager-agent ( on all servers)
yum install cloudera-manager-server  ( on CM server)

===========================================================================================================

Step 6 : 
===============================mysql setup ====================
MYSQL Installation:

Go to Mysql node : and place below files in ur home direcory: 

wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.46.tar.gz
 
wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm 
 
rpm -ivh mysql-community-release-el7-5.noarch.rpm

yum update yum
yum update
yum install mysql-server 

create symlink for /var/lib/mysql to /app/mysql

ln -s /var/lib/mysql to /apps/mysql
ln -s /apps/mysql  /var/lib/mysql

cd /apps
chown mysql:mysql
chmod 775 -R /app/mysql
create dir /apps/mysql_tmp
chown mysql:mysql
chmod 775 -R /apps/mysql_tmp
systemctl start mysqld
systemctl stop mysqld

Move old InnoDB log files /var/lib/mysql/ib_logfile0 and /var/lib/mysql/ib_logfile1 out of /var/lib/mysql/ to a backup location.
mv /var/lib/mysql/ib_logfile0 /tmp
mv /var/lib/mysql/ib_logfile1  /tmp

copy /etc/my.cnf from DEV and place it in /etc location, also set all read permissions to the file.

run secure mysql -->  /usr/bin/mysql_secure_installation

[...]
Enter current password for root (enter for none): Blank
OK, successfully used password, moving on...
[...]
Set root password? [Y/n] Y
New password: Cloudera@6
Re-enter new password:Cloudera@6
Remove anonymous users? [Y/n] Y
[...]
Disallow root login remotely? [Y/n] N
[...]
Remove test database and access to it [Y/n] Y
[...]
Reload privilege tables now? [Y/n] Y
All done!

systemctl restart mysqld

---------------------------------------------------------------------------
step - 7
-------------------
installing jdbc driver :

wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.46.tar.gz
tar zxvf mysql-connector-java-5.1.46.tar.gz
mkdir /usr/share/java/
cd mysql-connector-java-5.1.46
cp mysql-connector-java-5.1.46-bin.jar /usr/share/java/mysql-connector-java.jar
chmod 755 /usr/share/java/mysql-connector-java.jar 

------------------------------------------------------------------------------
==================
Step - 8 :
==============
-- Create the databases required for the Cloudera Manager in MySQL

mysql uroot -pCloudera@6

create database scm DEFAULT CHARACTER SET utf8  DEFAULT COLLATE utf8_general_ci;
grant all on scm.* TO 'scm'@'%' IDENTIFIED BY 'scm_ClouderaEDL_6';

create database amon DEFAULT CHARACTER SET utf8  DEFAULT COLLATE utf8_general_ci;
grant all on amon.* TO 'amon'@'%' IDENTIFIED BY 'amon_ClouderaEDL_6';

create database rman DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
grant all on rman.* TO 'rman'@'%' IDENTIFIED BY 'rman_ClouderaEDL_6';

create database nav DEFAULT CHARACTER SET utf8  DEFAULT COLLATE utf8_general_ci;
grant all on nav.* TO 'nav'@'%' IDENTIFIED BY 'nav_ClouderaEDL_6';

create database metastore DEFAULT CHARACTER SET utf8  DEFAULT COLLATE utf8_general_ci;
grant all on metastore.* TO 'hive'@'%' IDENTIFIED BY 'metastore_ClouderaEDL_6';

create database sentry DEFAULT CHARACTER SET utf8  DEFAULT COLLATE utf8_general_ci;
grant all on sentry.* TO 'sentry'@'%' IDENTIFIED BY 'sentry_ClouderaEDL_6';

create database navms DEFAULT CHARACTER SET utf8  DEFAULT COLLATE utf8_general_ci;
grant all on navms.* TO 'navms'@'%' IDENTIFIED BY 'navms_ClouderaEDL_6';

create database hue DEFAULT CHARACTER SET utf8  DEFAULT COLLATE utf8_general_ci;
grant all on hue.* to 'hue'@'%' identified by 'hue_ClouderaEDL_6';

create database oozie DEFAULT CHARACTER SET utf8  DEFAULT COLLATE utf8_general_ci;
grant all on oozie.* to 'oozie'@'%' identified by 'oozie_ClouderaEDL_6';

-- Run the script to create the tables required for CM
-- This command needs to be run from the Cloudera Manager Server
-- we need to install the MySQL JDBC driver on the CM server node. Use the below commands to install on the CM server node. 

-- Copy the /etc/cloudera-scm-server/db.properties from the DEV server and change the connection options to the mysql server. 

EXAMPLE:

#-> cat /etc/cloudera-scm-server/db.properties
# Auto-generated by scm_prepare_database.sh on Mon Apr 29 23:15:09 EDT 2019
#
# For information describing how to configure the Cloudera Manager Server
# to connect to databases, see the "Cloudera Manager Installation Guide."
#
com.cloudera.cmf.db.type=mysql
com.cloudera.cmf.db.host=ITSUSRALSP08777.jnj.com   <----------- change this hostname to the Mysql hostname
com.cloudera.cmf.db.name=scm
com.cloudera.cmf.db.user=scm
com.cloudera.cmf.db.setupType=EXTERNAL
com.cloudera.cmf.db.password=scm_ClouderaEDL_6

-----------------------------------
-- Now run the below command on the Cloudera manager server to create the tables in the scm database. this script will run
-- from cloudera scm server and connect to the mysql server using the db.properties

/opt/cloudera/cm/schema/scm_prepare_database.sh -h ITSUSRALSP08777.jnj.com  mysql scm scm scm_ClouderaEDL_6

--Make sure all the Cloudera manager agent /etc/cloudera-scm-agent/config.ini files in all nodes are pointing to the right cloudera manager server
-- verify whether the certificates mentioned in the config.ini file for cloudera mangaer agent is right

=============================

STEP 9:
-------

JCE - 

-- Install JCE
-- download, unzip and upload the US_export_policy.jar files to all the servers from https://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html
or scp from dev server.

cp /home/asingh57/US_export_policy.jar /apps/java/jdk1.8.0_181/jre/lib/security/US_export_policy.jar
cp /home/asingh57/local_policy.jar /apps/java/jdk1.8.0_181/jre/lib/security/local_policy.jar
chmod 775 /apps/java/jdk1.8.0_181/jre/lib/security/US_export_policy.jar
chmod 775 /apps/java/jdk1.8.0_181/jre/lib/security/local_policy.jar

===============================================================================

STEP 10:
----------------
Install Certificates as per Avinash document and then do the following for remaining certificates

scp truststore.jks from Dev server to all nodes and move to /opt/cloudera/security/jks and also give permissions 0440.

scp /opt/cloudera/security/jks/truststore.jks /opt/cloudera/security/jks/
chmod 0440 truststore.jk

copy server.keystore as hdfs.keystore and httpfs.keystore in each individual node. Repeat this in all nodes.

cp server.keystore hdfs.keystore
cp server.keystore httpfs.keystore
chmod 775 h* 
chown cloudera-scm:cloudera-scm h*
chmod 0440 truststore.jks

Example:

[root@ITSUSRALSP08797:/opt/cloudera/security/jks]#
#-> ll
total 148
-rwxrwxr-x 1 cloudera-scm cloudera-scm   5130 May  8 16:18 hdfs.keystore
-rwxrwxr-x 1 cloudera-scm cloudera-scm   5130 May  8 16:19 httpfs.keystore
-rwxrwxr-x 1 cloudera-scm cloudera-scm   5130 May  7 17:52 server.keystore
-r--r--r-- 1 root         root         120116 May  6 17:08 truststore.jks

------------------------------------------

copy server.key as impala.key and server.pem as impala.cert as in below

cd /opt/cloudera/security/x509
cp server.key impala.key
chown impala:impala impala.key
chmod a+r impala.key

cp server.pem impala.cert
chown impala:impala impala.cert
chmod a+r impala.cert

under x509

rm impalacombined.cert

cd /opt/cloudera/security/x509
cat server.pem ../CAcerts/combinedtrust.pem server.key > impalacombined.cert
chown impala:impala impalacombined.cert
chmod a+r impalacombined.cert 


----------------
copy server.pem as hueserver.cert and server.key as hueserver.key as in below

cd /opt/cloudera/security/x509

cp server.pem hueserver.cert
chown hue:hue hueserver.cert
chmod a+r hueserver.cert

---------------------

cp server.key hueserver.key
chown hue:hue hueserver.key
chmod a+r hueserver.key

-------------------------------------------------

HBASE on all hbase servers

 cp server.keystore hbase.keystore
 chmod 775 hbase.keystore
 chown hbase:hbase hbase.keystore

==================================================================================
STEP 11:
--------------

Change permissions in all servers as in below where Hue is being installed.

cd /usr/lib/python2.7/site-packages
chmod 755 -R pip*
chmod 755 -R virtualenv_support
chmod 755 -R wheel
chmod 755 -R wheel-0.33.1.dist-info
chmod 755 -R virtualenv-16.4.3.dist-info

===============================================================================================

STEP 12:
----------------

Cloudera Manager Setup 

-- Restart the Cloudera Manager
http://<cm-servername>:7810
-- Not Turn on the SSL 
-- CM -> "Administartion" -> Settings -> search "ssl"
-- 1. Cloudera Manager TLS/SSL Server JKS Keystore File Location =>  "/opt/cloudera/security/jks/server.keystore"
-- 2. Cloudera Manager TLS/SSL Server JKS Keystore File Password => "Cloudea@6"
-- 3. Cloudera Manager TLS/SSL Client Trust Store File => "/opt/cloudera/security/jks/truststore.jks"
-- 4. Cloudera Manager TLS/SSL Client Trust Store Password => "changeit"
-- 5. Check "Use TLS Encryption for Admin Console"

-- Execute below command 
chmod 755 -R /opt/cloudera/security
-- Restart the Cloudera Manager
https://<cm-servername>:7813

-- At this point of time you should see all the hosts hearbeating to the Cloudera manager. If not make sure all are heart beating before you move ahead. 
-- Now, go to CM, select cluster -> add cluster -> name it "JnJ_RND_DEVCluster" and click next. 

--- it will show up the page where it asks for SSH/password. you should see a tab with name "unmanaged hosts" -> go to this tab and select all servers -> click next. 
-- Now it will ask for which parcels to install.


Follow the CM UI on further installation, planning on having screenshots of cluster installation while creating QA Cluster. 
Once the CM is up and running, copy all configurations from Dev cluster to the new cluster.

===============================================================

STEP 13:
-----------------

Create Hbase Directory in HDFS and give permissions as per below commands

hdfs dfs -ls /
hdfs dfs -mkdir /hbase
hdfs dfs -chown hbase:hbase /hbase
hdfs dfs -chmod 700 /hbase
hdfs dfs -ls /

====================================
Step 14:
---------------------

Enabling HA:

For enabling HA, we followed Cloudera Documentations as per below link.

---> We have selected the namenode servers, the namenode (/apps/dfs/nn) and journal nodes (/apps/dfs/jn) directories while enabling HA in CM. 
----> After enabling HA, it prompted that we must do some enabling in Hive metastore server, when we stop hive metastore server that option will appear. 

https://www.cloudera.com/documentation/enterprise/latest/topics/cdh_hag_hdfs_ha_intro.html


==============================================================
Step: 15
-----------------

Enabling Kerberos.

We followed the Cloudera instructions as per the below link to enable kerberos in RND Cluster.

Before that we have verified that we have installed krb5-workstation and krb5-libs on all servers. Also we have copied krb5.conf file from Dev server to all
RND servers in /etc/krb5.conf location.

yum install krb5-workstation

yum install krb5-libs

https://www.cloudera.com/documentation/enterprise/latest/topics/cm_sg_intro_kerb.html



==================================


cd /opt/cloudera/security/x509 
cp server.key kudu.key
chmod 755 kudu.key
cp impala.cert kudu.cert
chmod 755 kudu.cert

cd /opt/cloudera/security/x509 
chown kudu:kudu kudu.key
chown kudu:kudu kudu.cert

---------------------------
kafka

cd /opt/cloudera/security/jks
cp server.keystore kafka.keystore
chmod 755 kafka.keystore
chown kafka:kafka kafka.keystore

-----------------------------

solr 

cd /opt/cloudera/security/jks/
cp server.keystore solr.keystore
chmod 775 solr.keystore
chown solr:solr solr.keystore



==========================================================

Antivirus Scan on all RND Servers - Email - mmartori@ITS.JNJ.com

Hi Mike,

Please use below directories to be excluded from Antivirus scanning.  Let me know if anyone has any questions.

/var/log/flume-ng
/var/log/hbase/audit
/var/log/hbase
/var/log/hadoop-hdfs/audit
/var/log/hadoop-httpfs
/var/log/hive/audit
/var/log/hive/lineage
/var/log/hive
/var/log/hive/operation_logs
/var/log/hcatalog
/var/log/hue/audit
/var/log/hue-httpd
/var/log/catalogd
/var/log/impala-minidumps
/var/log/impalad
/var/log/statestore
/var/log/impalad/audit
/var/log/impalad/lineage
/var/log/impala-llama
/var/log/kafka
/var/log/kms-keytrustee
/var/log/kudu
/var/log/oozie
/var/log/sentry/audit
 /var/log/sentry
/var/log/solr/
/var/log/solr/audit
/var/log/spark
/var/log/spark/lineage
/var/log/spark2
/var/log/hadoop-mapreduce/history
/var/log/hadoop-mapreduce
/var/log/hadoop-yarn
/var/log/zookeeper
/var/log/cloudera-scm-alertpublisher
/var/log/cloudera-scm-eventserver
/var/log/cloudera-scm-firehose
/var/log/cloudera-scm-navigator
/var/log/cloudera-scm-navigator/audit
/var/log/cloudera-scm-headlamp
var/log/cloudera-scm-telemetrypublisher


/var/run/hue
/var/run/hdfs-sockets/dn


All folders under

/opt/cloudera/*
/data/*


============================
Step 13

Hue first setup

show roles;
create role its_admin;
grant all on server server1 to role its_admin;
grant role its_admin to group hive;
show grant role its_admin;



=============================
Master permissions same as Dev
 
cd /opt/cloudera/security/CAcerts
    chmod 644 combinedtrust.pem
    cd ../jks
cp server.keystore oozie.keystore
    cp server.keystore sdc.keystore
    cp server.keystore solr.keystore
    cp server.keystore spark.keystore
cp server.keystore hdfs.keystore
cp server.keystore httpfs.keystore
    chmod 444 *
    chmod 666 server.keystore
    chmod 644 truststore.jks
  
    chown oozie:oozie oozie.keystore
    chown sdc:sdc sdc.keystore
    chown solr:solr solr.keystore
    chown spark:spark spark.keystore
    chown httpfs:httpfs httpfs.keystore
    chown hdfs:hadoop hdfs.keystore

cd ../x509
  cp server.pem hueserver.cert
cp server.key hueserver.key 
cp server.key impala.key
cp server.pem impala.cert
    cp impala.cert hueloadbalancer.cert
 
     cp  impala.key hueloadbalancer.key
  
     chmod 444 hueloadbalancer.cert hueserver.cert impala.cert impalacombined.cert server.pem
   
     chmod 440 hueloadbalancer.key hueserver.key impala.key server.key
   
    chmod 444 serverkey.pw

    chown hue:hue hueloadbalancer.cert hueloadbalancer.key hueserver.cert hueserver.key


----------------------------------------

Edge Node:

    cd /opt/cloudera/security/CAcerts
    chmod 644 combinedtrust.pem
    cd ../jks
    cp server.keystore hbase.kestore
    cp server.keystore hdfs.keystore
    cp server.keystore httpfs.keystore
    cp server.keystore sdc.keystore
    cp server.keystore hive.keystore
    cp server.keystore oozie.keystore
    cp server.keystore solr.keystore
    cp server.keystore spark.keystore
   
    chmod 444 hbase.kestore hdfs.keystore hive.keystore httpfs.keystore oozie.keystore sdc.keystore solr.keystore spark.keystore
 
    chmod 666 server.keystore
    chown hbase:hbase hbase.kestore
  
    chown hdfs:hadoop hdfs.keystore
    chown hive:hive hive.keystore
    chown httpfs:httpfs httpfs.keystore
    chown oozie:oozie oozie.keystore
    chown sdc:sdc sdc.keystore
    chown spark:spark spark.keystore
    chown solr:solr solr.keystore
  
     chmod 644 truststore.jks
  
     chmod 644 truststore.jks
  
     cd ../x509
  cp server.pem hueserver.cert
cp server.key hueserver.key 
cp server.key impala.key
cp server.pem impala.cert
    cp impala.cert hueloadbalancer.cert
 
     cp  impala.key hueloadbalancer.key
  
     chmod 444 hueloadbalancer.cert hueserver.cert impala.cert impalacombined.cert server.pem
   
     chmod 440 hueloadbalancer.key hueserver.key impala.key server.key
   
    chmod 444 serverkey.pw

    chown hue:hue hueloadbalancer.cert hueloadbalancer.key hueserver.cert hueserver.key
  

-----------------------------

Myssql sserver


     cd /opt/cloudera/security/CAcerts
     chmod 644 combinedtrust.pem
     cd ../jks
     cp server.keystore hbase.keystore
     cp server.keystore hive.keystore
     cp server.keystore kms.keystore
     cp server.keystore oozie.keystore
     cp server.keystore sdc.keystore
     cp server.keystore solr.keystore
     cp server.keystore spark.keystore
    
     ll
     chmod 444 *
     ll
     chmod 666 server.keystore
     chmod 644 truststore.jks
     ll
     chown hbase:hbase hbase.keystore
     chown hdfs:hadoop hdfs.keystore
     chown hive:hive hive.keystore
     chown httpfs:httpfs httpfs.keystore
     chown kms:kms kms.keystore
     chown oozie:oozie oozie.keystore
     chown sdc:sdc sdc.keystore
     ll
     chown solr:solr solr.keystore
     chown spark:spark spark.keystore
    
     cd ../x509
cd x509/
cp server.pem hueserver.cert
cp server.key hueserver.key 
cp server.key impala.key
cp server.pem impala.cert
cp server.key kudu.key
cp server.pem kudu.cert
    
cp hueserver.cert hueloadbalancer.cert
cp hueserver.key hueloadbalancer.key
chown hue:hue hueloadbalancer.cert hueloadbalancer.key
chmod 444 *
chmod 440 hueloadbalancer.key hueserver.key  server.key serverkey.pw

    
     chmod 444 hueloadbalancer.cert hueserver.cert impala.cert impalacombined.cert server.pem
     
     chmod 440 hueloadbalancer.key hueserver.key impala.key server.key serverkey.pw
     chown hue:hue hueloadbalancer.cert hueloadbalancer.key
     ll
----------------------------------------

Datanode

--------------
cd /opt/cloudera/security/CAcerts
chmod 644 combinedtrust.pem
cd /opt/cloudera/security/jks/
cp server.keystore solr.keystore
chmod 775 solr.keystore
chown solr:solr solr.keystore

cp server.keystore hive.keystore
cp server.keystore oozie.keystore
cp server.keystore sdc.keystore
     
cp server.keystore spark.keystore
cp server.keystore hdfs.keystore
cp server.keystore httpfs.keystore
cp server.keystore hbase.keystore


chmod 444 *
chmod 666 server.keystore
chown hdfs:hadoop hdfs.keystore
chown hbase:hbase hbase.keystore
chown hive:hive hive.keystore
chown httpfs:httpfs httpfs.keystore
chown oozie:oozie oozie.keystore
chown sdc:sdc sdc.keystore
chown spark:spark spark.keystore
chmod 644 truststore.jks
cd ../x509
cp server.pem hueserver.cert
cp server.key hueserver.key 
cp server.key impala.key
cp server.pem impala.cert
cp server.key kudu.key
cp server.pem kudu.cert
    
cp hueserver.cert hueloadbalancer.cert
cp hueserver.key hueloadbalancer.key
chown hue:hue hueloadbalancer.cert hueloadbalancer.key
chmod 444 *
chmod 440 hueloadbalancer.key hueserver.key impala.key server.key serverkey.pw
chmod 755 kudu.cert kudu.key
     
   
   71  history
----------------
 CM
jks
 cp server.keystore hdfs.keystore
 cp server.keystore httpfs.keystore

cd ../x509
cp server.pem hueserver.cert
cp server.key hueserver.key 
cp server.key impala.key
cp server.pem impala.cert

cp hueserver.cert hueloadbalancer.cert
cp hueserver.key hueloadbalancer.key
chown hue:hue hueloadbalancer.cert hueloadbalancer.key
chmod 444 *
chmod 440 hueloadbalancer.key hueserver.key impala.key server.key serverkey.pw
-----------------------------------------------------------------


apply to ad group - its-app-rndedl-dev-adm-dvlp-usr and add this group in Sentry configurations.

==============================

hue check access permissions 

Can you please apply to the 2 zones : you need to apply to zones in order to gain access to Linux boxes
ITSRNDDEVEDGE-LINUX-NA  and ITSRNDDEV-LINUX-NA

hdfs dfs -getfacl /dev/rndedl/pharma/rnd/rddp/str/rddp_core


------------------------------------------

cd /home/abaseerm/
mkdir security_bkup_june6
cp -rp /opt/cloudera/security/* /home/abaseerm/security_bkup_june6


cd /opt/cloudera/security/
cd CAcerts/
rm -rf *
cd ../jks/
rm -rf *.keystore
cd ../x509/
rm -rf *



BUG for Hue AD group sync

https://github.com/cloudera/hue/commit/9e05a0a96133b3c7be58a2805b0f995edbd9f8a6

take backup of ldap_access.py update changes in ldap_access.py file and change permissions, copy to all servers

cp ldap_access.py ldap_access_bkup_6_11.py

make changes as per above link and restart this hue server.


copy the edited changed file to all the other servers and put inthe location and restart the hue servers

scp /opt/cloudera/parcels/CDH/lib/hue/apps/useradmin/src/useradmin/ldap_access.py abaseerm@ITSUSRALSP08792:/home/abaseerm/

cd /opt/cloudera/parcels/CDH/lib/hue/apps/useradmin/src/useradmin/
cp ldap_access.py ldap_access_bkup_6_11.py
rm ldap_access.py 
cp /home/abaseerm/ldap_access.py /opt/cloudera/parcels/CDH/lib/hue/apps/useradmin/src/useradmin/
chmod 644 ldap_access.py



Spark issue:

$ sudo -u hdfs hadoop fs -mkdir /user/spark
$ sudo -u hdfs hadoop fs -mkdir /user/spark/applicationHistory 
$ sudo -u hdfs hadoop fs -chown -R spark:spark /user/spark 
$ sudo -u hdfs hadoop fs -chmod 1777 /user/spark/applicationHistory

--------------------

hdfs dfs -mkdir /user/spark/driverLogs
hdfs dfs -chown spark:spark /user/spark/driverLogs
hdfs dfs -chmod 1777 /user/spark/driverLogs


